library(gapminder)
View(gapminder)
library(dplyr)
gapminder %>% filter(year==2007)
library(ggplot2)
library(reshape)
countries = read.csv('Data/WDI_GDF_Country.csv', strip.white=TRUE)
countries = read.csv('WDI_GDF_Country.csv', strip.white=TRUE)
worldData = read.csv('WDI_GDF_Data.csv', strip.white=TRUE)
worldData2 = worldData[which(worldData$Series.Code %in% c('NY.GDP.MKTP.KD', 'SE.XPD.TOTL.GD.ZS', 'SP.DYN.LE00.IN', 'SP.POP.TOTL')), c('Series.Code', 'Series.Name', 'Country.Name', 'Country.Code', 'X2008')]
worldData2 = merge(worldData2, countries[,c('Country.Code', 'Region')], by='Country.Code')
worldData2 = worldData2[which(worldData2$Region != 'Aggregates'),]
worldData2$Series.Name = as.factor(as.character(worldData2$Series.Name))
worldData2$Region = as.factor(as.character(worldData2$Region))
worldData3 = cast(worldData2, Country.Name + Region ~ Series.Name, mean, value='X2008')
names(worldData3) = c('Country', 'Region', 'GDP', 'Life.Expectancy', 'Population', 'Education')
worldData3$GDP.log = log(worldData3$GDP)
worldData3$GDP = worldData3$GDP / 1000000000 #Billions
worldData3$Population = worldData3$Population / 1000000 #Millions
p = ggplot(worldData3, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', to=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
p = ggplot(worldData3, aes(x=GDP.log, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', to=c(1,20)) + xlab('Gross Domestic Product (log scale)') + ylab('Life Expectancy at birth (years)')
worldData4 = worldData3[which(worldData3$GDP < 2000),]
p = ggplot(worldData4, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', to=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
gworldData = worldData[which(worldData$Series.Code %in% c('NY.GDP.MKTP.KD', 'SP.DYN.LE00.IN', 'SP.POP.TOTL')), c('Series.Code', 'Series.Name', 'Country.Name', 'Country.Code', 'X2000', 'X2001', 'X2002', 'X2003', 'X2004', 'X2005', 'X2006', 'X2007', 'X2008')]
gworldData = merge(gworldData, countries[,c('Country.Code', 'Region')], by='Country.Code')
gworldData = gworldData[which(gworldData$Region != 'Aggregates'),]
gworldData$Series.Name = as.factor(as.character(gworldData$Series.Name))
gworldData$Region = as.factor(as.character(gworldData$Region))
gworldData = melt(gworldData, id=c('Country.Code', 'Series.Code', 'Series.Name', 'Country.Name', 'Region'))
gworldData = cast(gworldData, Country.Name + Region + variable ~ Series.Name, mean, value='value')
names(gworldData) = c('Country', 'Region', 'Year', 'GDP', 'Life.Expectancy', 'Population')
gworldData$GDP = gworldData$GDP / 1000000000 #Billions
gworldData$Population = gworldData$Population / 1000000 #Millions
gworldData$Year = as.integer(substr(gworldData$Year, 2,5))
head(gworldData)
m = gvisMotionChart(gworldData, idvar='Country', timevar='Year')
cat(m$html$chart)
plot(m)
worldData2 = worldData[which(worldData$Series.Code %in% c('NY.GDP.MKTP.KD', 'SE.XPD.TOTL.GD.ZS', 'SP.DYN.LE00.IN', 'SP.POP.TOTL')), c('Series.Code', 'Series.Name', 'Country.Name', 'Country.Code', 'X2008')]
worldData2 = merge(worldData2, countries[,c('Country.Code', 'Region')], by='Country.Code')
worldData2 = worldData2[which(worldData2$Region != 'Aggregates'),]
worldData2$Series.Name = as.factor(as.character(worldData2$Series.Name))
worldData2$Region = as.factor(as.character(worldData2$Region))
worldData3 = cast(worldData2, Country.Name + Region ~ Series.Name, mean, value='X2008')
names(worldData3) = c('Country', 'Region', 'GDP', 'Life.Expectancy', 'Population', 'Education')
worldData3$GDP.log = log(worldData3$GDP)
worldData3$GDP = worldData3$GDP / 1000000000 #Billions
worldData3$Population = worldData3$Population / 1000000 #Millions
p = ggplot(worldData3, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', to=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
View(worldData3)
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population', to=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
?scale_size_continuous
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', limit=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
p = ggplot(worldData3, aes(x=GDP.log, y=Life.Expectancy, label=Country))
p = ggplot(worldData3, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', limit=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
p = ggplot(worldData3, aes(x=GDP.log, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', limit=c(1,20)) + xlab('Gross Domestic Product (log scale)') + ylab('Life Expectancy at birth (years)')
worldData4 = worldData3[which(worldData3$GDP < 2000),]
p = ggplot(worldData4, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', limit=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
gworldData = worldData[which(worldData$Series.Code %in% c('NY.GDP.MKTP.KD', 'SP.DYN.LE00.IN', 'SP.POP.TOTL')), c('Series.Code', 'Series.Name', 'Country.Name', 'Country.Code', 'X2000', 'X2001', 'X2002', 'X2003', 'X2004', 'X2005', 'X2006', 'X2007', 'X2008')]
gworldData = merge(gworldData, countries[,c('Country.Code', 'Region')], by='Country.Code')
gworldData = gworldData[which(gworldData$Region != 'Aggregates'),]
gworldData$Series.Name = as.factor(as.character(gworldData$Series.Name))
gworldData$Region = as.factor(as.character(gworldData$Region))
gworldData = melt(gworldData, id=c('Country.Code', 'Series.Code', 'Series.Name', 'Country.Name', 'Region'))
gworldData = cast(gworldData, Country.Name + Region + variable ~ Series.Name, mean, value='value')
names(gworldData) = c('Country', 'Region', 'Year', 'GDP', 'Life.Expectancy', 'Population')
gworldData$GDP = gworldData$GDP / 1000000000 #Billions
gworldData$Population = gworldData$Population / 1000000 #Millions
gworldData$Year = as.integer(substr(gworldData$Year, 2,5))
head(gworldData)
m = gvisMotionChart(gworldData, idvar='Country', timevar='Year')
??gvisMotionChart
library(googleVis)
head(gworldData)
m = gvisMotionChart(gworldData, idvar='Country', timevar='Year')
cat(m$html$chart)
plot(m)
plot(m)
library(ggplot2)
library(reshape)
library(googleVis)
countries = read.csv('data/WDI_GDF_Country.csv', strip.white=TRUE)
worldData = read.csv('data/WDI_GDF_Data.csv', strip.white=TRUE)
worldData2 = worldData[which(worldData$Series.Code %in% c('NY.GDP.MKTP.KD', 'SE.XPD.TOTL.GD.ZS', 'SP.DYN.LE00.IN', 'SP.POP.TOTL')), c('Series.Code', 'Series.Name', 'Country.Name', 'Country.Code', 'X2008')]
worldData2 = merge(worldData2, countries[,c('Country.Code', 'Region')], by='Country.Code')
worldData2 = worldData2[which(worldData2$Region != 'Aggregates'),]
worldData2$Series.Name = as.factor(as.character(worldData2$Series.Name))
worldData2$Region = as.factor(as.character(worldData2$Region))
worldData3 = cast(worldData2, Country.Name + Region ~ Series.Name, mean, value='X2008')
names(worldData3) = c('Country', 'Region', 'GDP', 'Life.Expectancy', 'Population', 'Education')
worldData3$GDP.log = log(worldData3$GDP)
worldData3$GDP = worldData3$GDP / 1000000000 #Billions
worldData3$Population = worldData3$Population / 1000000 #Millions
p = ggplot(worldData3, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', limit=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
p = ggplot(worldData3, aes(x=GDP.log, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', limit=c(1,20)) + xlab('Gross Domestic Product (log scale)') + ylab('Life Expectancy at birth (years)')
worldData4 = worldData3[which(worldData3$GDP < 2000),]
p = ggplot(worldData4, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', limit=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
gworldData = worldData[which(worldData$Series.Code %in% c('NY.GDP.MKTP.KD', 'SP.DYN.LE00.IN', 'SP.POP.TOTL')), c('Series.Code', 'Series.Name', 'Country.Name', 'Country.Code', 'X2000', 'X2001', 'X2002', 'X2003', 'X2004', 'X2005', 'X2006', 'X2007', 'X2008')]
gworldData = merge(gworldData, countries[,c('Country.Code', 'Region')], by='Country.Code')
gworldData = gworldData[which(gworldData$Region != 'Aggregates'),]
gworldData$Series.Name = as.factor(as.character(gworldData$Series.Name))
gworldData$Region = as.factor(as.character(gworldData$Region))
gworldData = melt(gworldData, id=c('Country.Code', 'Series.Code', 'Series.Name', 'Country.Name', 'Region'))
gworldData = cast(gworldData, Country.Name + Region + variable ~ Series.Name, mean, value='value')
names(gworldData) = c('Country', 'Region', 'Year', 'GDP', 'Life.Expectancy', 'Population')
gworldData$GDP = gworldData$GDP / 1000000000 #Billions
gworldData$Population = gworldData$Population / 1000000 #Millions
gworldData$Year = as.integer(substr(gworldData$Year, 2,5))
head(gworldData)
m = gvisMotionChart(gworldData, idvar='Country', timevar='Year')
cat(m$html$chart)
plot(m)
# heart
n <- 30000
p <- sort(runif(n, min=0, max=pi))
p <- sin(p) + rnorm(n)
plot(sort(rnorm(n)), -p, col="red", pch="·", axes=F, ylab="", xlab="")
#plot(sort(rnorm(n)), -p, col="red", pch="·", axes=F, ylab="", xlab=paste("By 微微    ", Sys.Date()), main="Happy Birthday")
#stars
p <- c()
q <- c()
rr <- c(0.68, rep(0.32, 4))
#locator()定的下面坐标，精确但不准确。
m <- c(-1.2511927, -0.7707085, -0.5538095, -0.6129638, -0.8293381)
n <- c(-0.079779159, 0.42312375, 0.05632304, -0.45719796, -0.8440031)
for (k in c(1:5)) {
r=rr[k]
for (i in 1:5) {
p[2*i-1] <- sin(pi*18/90) / sin(pi*54/90) * r * sin(pi*(i*72+36) / 90)
q[2*i-1] <- sin(pi*18/90) / sin(pi*54/90) * r * cos(pi*(i*72+36) / 90)
p[2*i] <- sin(pi*18/90) / sin(pi*54/90) *0.38 * r * sin(pi*(i*72+18) / 90)
q[2*i] <- sin(pi*18/90) / sin(pi*54/90) * 0.38 * r * cos(pi*(i*72+18) / 90)
}
x <- c(p[1], p[2], p[5], p[6], p[9], p[10], p[3], p[4], p[7], p[8], p[1])
y <- c(q[1], q[2], q[5], q[6], q[9], q[10], q[3], q[4], q[7], q[8], q[1])
x <- x + m[k]
y <- y + n[k]
polygon(x, y, col="yellow", border="yellow")
}
xtheta <- function(x, theta, y, w=0, tt=0) {
(x^2 + (x * tan(theta))^2 + 2 * y^2 + 0.1 * cos(w*tt) -0.9 )^3 - (x^2 + y^2/9) * (x * tan(theta))^3
}
fz <- function(z, x, y, w=0, tt=0) {
(x^2 + 2 * y^2 + z^2 + 0.1 * cos(w*tt) - 0.9)^3 - (x^2 + y^2/9) * z^3
}
n <- 100
y <- seq(-2, 2, length.out=n)
y0 <- xx <- zz <- NULL
for (i in 1:length(y)) {
theta <- seq(-pi/2, 1.5*pi, length.out=n)
solvex <- function(theta, y) {
if(theta==-pi/2 | theta==pi/2 | theta==1.5*pi) {
return(0)
} else if(theta>-pi/2 & theta<pi/2) {
interval=c(0, 2)
} else {
interval=c(-2, 0)
}
x.root <- uniroot(xtheta, interval, theta, y)$root
return(x.root)
}
if(xtheta(0, pi/4, y[i]) * xtheta(2, pi/4, y[i])>0) next
y0 <- c(y0, y[i])
x <- sapply(theta, solvex, y[i])
zplus <- uniroot(fz, c(0,2), 0, y[i])$root
zminus <- uniroot(fz, c(-2,0), 0, y[i])$root
z <- numeric(n)
z[x!=0] <- x[x!=0] * tan(theta[x!=0])
z[x==0] <- (theta[x==0]==pi/2) * zplus + (theta[x==0]!=pi/2) * zminus
xx <- cbind(xx,x)
zz <- cbind(zz,z)
}
yy <- matrix(rep(y0,n), n, length(y0), byrow=TRUE)
library(rgl)
persp3d(zz, xx, yy, col="red", xlim=c(-1,1), ylim=c(-1,1), zlim=c(-1,1), axes=FALSE, box=FALSE, xlab="", ylab="", zlab="");
#decorate3d(xlim=c(-1,1), ylim=c(-1,1), zlim=c(-1,1), xlab='z', ylab='x', zlab='y');
fy <- function(y, pars) {
z <- pars[1]
x <- pars[2]
w <- pars[3]
tt <- pars[4]
(x^2 + 2 * y^2 + z^2 + 0.1 * cos(w*tt) - 0.9)^3 - (x^2 + y^2/9) * z^3
}
gety <- function(z, x, interval=c(0.01,1), w=0, tt=0) {
mpars <- cbind(z, x, w, tt)
solvey <- function(pars) {
if(fy(interval[1], pars) * fy(interval[2], pars) > 0) {
return(NA)
} else {
y <- uniroot(fy, interval, pars)$root
}
}
y <- apply(mpars, 1, solvey)
return(y)
}
x0 <- z0 <- seq(-1, 1, length.out=n)
y0 <- outer(z0, x0, gety)
persp3d(x=z0, y=x0, z=y0, zlim=c(-1,1), col="white", texture="flag.png", add=TRUE)
persp3d(x=z0, y=x0, z=-y0, zlim=c(-1,1), col="red", add=TRUE)
library(ggplot2)
library(reshape)
library(googleVis)
countries = read.csv('data/WDI_GDF_Country.csv', strip.white=TRUE)
worldData = read.csv('data/WDI_GDF_Data.csv', strip.white=TRUE)
worldData2 = worldData[which(worldData$Series.Code %in% c('NY.GDP.MKTP.KD', 'SE.XPD.TOTL.GD.ZS', 'SP.DYN.LE00.IN', 'SP.POP.TOTL')), c('Series.Code', 'Series.Name', 'Country.Name', 'Country.Code', 'X2008')]
worldData2 = merge(worldData2, countries[,c('Country.Code', 'Region')], by='Country.Code')
worldData2 = worldData2[which(worldData2$Region != 'Aggregates'),]
worldData2$Series.Name = as.factor(as.character(worldData2$Series.Name))
worldData2$Region = as.factor(as.character(worldData2$Region))
worldData3 = cast(worldData2, Country.Name + Region ~ Series.Name, mean, value='X2008')
names(worldData3) = c('Country', 'Region', 'GDP', 'Life.Expectancy', 'Population', 'Education')
worldData3$GDP.log = log(worldData3$GDP)
worldData3$GDP = worldData3$GDP / 1000000000 #Billions
worldData3$Population = worldData3$Population / 1000000 #Millions
p = ggplot(worldData3, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', limit=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
p = ggplot(worldData3, aes(x=GDP.log, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', limit=c(1,20)) + xlab('Gross Domestic Product (log scale)') + ylab('Life Expectancy at birth (years)')
worldData4 = worldData3[which(worldData3$GDP < 2000),]
p = ggplot(worldData4, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', limit=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
gworldData = worldData[which(worldData$Series.Code %in% c('NY.GDP.MKTP.KD', 'SP.DYN.LE00.IN', 'SP.POP.TOTL')), c('Series.Code', 'Series.Name', 'Country.Name', 'Country.Code', 'X2000', 'X2001', 'X2002', 'X2003', 'X2004', 'X2005', 'X2006', 'X2007', 'X2008')]
gworldData = merge(gworldData, countries[,c('Country.Code', 'Region')], by='Country.Code')
gworldData = gworldData[which(gworldData$Region != 'Aggregates'),]
gworldData$Series.Name = as.factor(as.character(gworldData$Series.Name))
gworldData$Region = as.factor(as.character(gworldData$Region))
gworldData = melt(gworldData, id=c('Country.Code', 'Series.Code', 'Series.Name', 'Country.Name', 'Region'))
gworldData = cast(gworldData, Country.Name + Region + variable ~ Series.Name, mean, value='value')
names(gworldData) = c('Country', 'Region', 'Year', 'GDP', 'Life.Expectancy', 'Population')
gworldData$GDP = gworldData$GDP / 1000000000 #Billions
gworldData$Population = gworldData$Population / 1000000 #Millions
gworldData$Year = as.integer(substr(gworldData$Year, 2,5))
head(gworldData)
m = gvisMotionChart(gworldData, idvar='Country', timevar='Year')
cat(m$html$chart)
plot(m)
n <- 50000
r <- 0.7
r_e <- (1 - r * r) ^ 0.5
X <- rnorm(n)
Y <- X * r + r_e * rnorm(n)
Y <- ifelse(X>0, Y, -Y)
a <- sample(c(2,6,7,8), 50000, T)
b <- sample(c(76,79,86,69), 50000, T)
plot(X, Y, col=0)
text(X, Y, "LOVE", col=a)
n <- 50000
r <- 0.7
r_e <- (1 - r * r) ^ 0.5
X <- rnorm(n)
Y <- X * r + r_e * rnorm(n)
Y <- ifelse(X>0, Y, -Y)
plot(X, Y, col="pink")
xrange <- c(-15, 15)
yrange <- c(0, 16)
plot(0, xlim=xrange, ylim=yrange, type="n")
#plot(xrange, yrange, type="n", ann=FALSE, axes=FALSE)
yr <- seq(yrange[1], yrange[2], len=50)
offsetFn <- function(y) {
2 * sin(0 + y/3)
}
offset <- offsetFn(yr)
leftE <- function(y) {
-10 - offsetFn(y)
}
rightE <- function(y) {
10 + offsetFn(y)
}
xp <- c(leftE(yr), rev(rightE(yr)))
yp <- c(yr, rev(yr))
polygon(xp, yp, col="#ffeecc", border=NA)
h <- 9
xt <- seq(0, rightE(h), len=100)
yt <- log(1 + log(1 + log(xt + 1)))
yt <- yt - min(yt)
yt <- h * yt/max(yt)
x <- c(leftE(h), rightE(h), rev(xt), -xt)
y <- c(h, h, rev(yt), yt)
polygon(x, y, col="red", border=NA)
#!/usr/bin/Rscript
xrange <- c(-15, 15)
yrange <- c(0, 16)
plot(0, xlim=xrange, ylim=yrange, type="n")
#plot(xrange, yrange, type="n", ann=FALSE, axes=FALSE)
yr <- seq(yrange[1], yrange[2], len=50)
offsetFn <- function(y) {
2 * sin(0 + y/3)
}
offset <- offsetFn(yr)
leftE <- function(y) {
-10 - offsetFn(y)
}
rightE <- function(y) {
10 + offsetFn(y)
}
xp <- c(leftE(yr), rev(rightE(yr)))
yp <- c(yr, rev(yr))
polygon(xp, yp, col="#ffeecc", border=NA)
h <- 9
xt <- seq(0, rightE(h), len=100)
yt <- log(1 + log(1 + log(xt + 1)))
yt <- yt - min(yt)
yt <- h * yt/max(yt)
x <- c(leftE(h), rightE(h), rev(xt), -xt)
y <- c(h, h, rev(yt), yt)
polygon(x, y, col="red", border=NA)
